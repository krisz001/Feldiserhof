<%- include('../partials/head', { 
  title: t('admin.menuEditor'),
  description: t('admin.menuEditorDesc')
}) %>

<%- include('../partials/navbar') %>

<main class="container py-5 mt-5">
  <div class="row">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
          <h1 class="h2 text-primary mb-0">
            <i class="fas fa-utensils me-2"></i>
            <span><%= t('admin.menuEditor') %></span>
          </h1>

          <!-- Nyelvválasztó -->
          <div class="dropdown ms-3">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-globe me-1"></i>
              <span id="current-language"><%- (i18n.language === 'de' ? 'Deutsch' : 'Magyar') %></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="languageDropdown">
              <li>
                <a class="dropdown-item language-option <%- i18n.language === 'hu' ? 'active' : '' %>" href="/set-language/hu?admin=true" rel="nofollow">
                  <i class="flag-icon flag-icon-hu me-2"></i><span>Magyar</span>
                </a>
              </li>
              <li>
                <a class="dropdown-item language-option <%- i18n.language === 'de' ? 'active' : '' %>" href="/set-language/de?admin=true" rel="nofollow">
                  <i class="flag-icon flag-icon-de me-2"></i><span>Deutsch</span>
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div>
          <a href="/admin" class="btn btn-outline-secondary me-2">
            <i class="fas fa-arrow-left me-1"></i><%= t('admin.back') %>
          </a>
          <form id="logoutForm" method="post" action="/admin/logout" class="d-inline">
            <input type="hidden" name="_csrf" value="<%= typeof csrfToken !== 'undefined' ? csrfToken : '' %>">
            <button class="btn btn-outline-danger" type="submit">
              <i class="fas fa-sign-out-alt me-1"></i><%= t('admin.logout') %>
            </button>
          </form>
        </div>
      </div>

      <!-- Gyors műveletek -->
      <div class="row mb-4">
        <div class="col-md-4">
          <button class="btn btn-success w-100" onclick="openCategoryModal()">
            <i class="fas fa-plus me-2"></i><%= t('admin.newCategory') %>
          </button>
        </div>
        <div class="col-md-4">
          <button class="btn btn-primary w-100" onclick="openItemModal()">
            <i class="fas fa-plus me-2"></i><%= t('admin.newItem') %>
          </button>
        </div>
        <div class="col-md-4">
          <button class="btn btn-info w-100" onclick="saveMenu()">
            <i class="fas fa-save me-2"></i><%= t('admin.save') %>
          </button>
        </div>
      </div>

      <!-- Menü szerkesztő -->
      <div class="card">
        <div class="card-body">
          <div id="menuEditor">
            <!-- Itt jelenik meg a menü szerkesztő -->
            <div class="text-center text-muted py-5" id="loadingMessage">
              <i class="fas fa-spinner fa-spin me-2"></i><%= t('admin.loadingMenu') %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Kategória Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="categoryModalTitle"><%= t('admin.newCategory') %></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="categoryForm">
          <input type="hidden" id="categoryIndex" value="">
          <div class="mb-3">
            <label for="categoryName" class="form-label"><%= t('admin.categoryName') %></label>
            <input type="text" class="form-control" id="categoryName" required>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><%= t('admin.cancel') %></button>
        <button type="button" class="btn btn-primary" onclick="saveCategory()"><%= t('admin.save') %></button>
      </div>
    </div>
  </div>
</div>

<!-- Tétel Modal -->
<div class="modal fade" id="itemModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="itemModalTitle"><%= t('admin.newItem') %></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="itemForm">
          <input type="hidden" id="itemCategoryIndex" value="">
          <input type="hidden" id="itemIndex" value="">
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="itemName" class="form-label"><%= t('admin.name') %> *</label>
                <input type="text" class="form-control" id="itemName" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="itemPrice" class="form-label"><%= t('admin.price') %> (Fr) *</label>
                <input type="number" class="form-control" id="itemPrice" min="0" required>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label for="itemDescription" class="form-label"><%= t('admin.description') %></label>
            <textarea class="form-control" id="itemDescription" rows="3"></textarea>
          </div>

          <div class="mb-3">
            <label for="itemTags" class="form-label"><%= t('admin.tags') %></label>
            <input type="text" class="form-control" id="itemTags" placeholder="hausgemacht, frisch, würzig">
          </div>

          <div class="mb-3">
            <label for="itemAllergens" class="form-label"><%= t('admin.allergens') %></label>
            <input type="text" class="form-control" id="itemAllergens" placeholder="Laktose, Gluten, Nüsse">
          </div>

          <div class="mb-3">
            <label for="itemCategory" class="form-label"><%= t('admin.selectCategory') %> *</label>
            <select class="form-select" id="itemCategory" required>
              <option value=""><%= t('admin.selectCategory') %></option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><%= t('admin.cancel') %></button>
        <button type="button" class="btn btn-primary" onclick="saveItem()"><%= t('admin.save') %></button>
      </div>
    </div>
  </div>
</div>

<%- include('../partials/footer') %>

<style>
.menu-category {
  border: 1px solid #dee2e6;
  border-radius: 0.375rem;
  margin-bottom: 1.5rem;
}
.menu-category-header {
  background: #f8f9fa;
  padding: 1rem;
  border-bottom: 1px solid #dee2e6;
}
.menu-item {
  padding: 1rem;
  border-bottom: 1px solid #f8f9fa;
}
.menu-item:last-child {
  border-bottom: none;
}
.allergen-badge {
  font-size: 0.7em;
  background: #dc3545;
  color: white;
}
.tag-badge {
  font-size: 0.7em;
  background: #6c757d;
  color: white;
}
</style>

<script>
let menuData = { title: "", categories: [] };
let csrfToken = '';

// CSRF token lekérése
async function getCsrfToken() {
  if (!csrfToken) {
    try {
      const response = await fetch('/api/csrf-token');
      const data = await response.json();
      csrfToken = data.token;
    } catch (error) {
      console.error('CSRF token lekérési hiba:', error);
    }
  }
  return csrfToken;
}

// Menü betöltése
async function loadMenu() {
  try {
    const response = await fetch('/api/menu', {
      headers: { 'CSRF-Token': await getCsrfToken() }
    });
    if (!response.ok) throw new Error('Failed to load menu data');
    menuData = await response.json();
    renderMenu();
  } catch (error) {
    console.error('Hiba a menü betöltésekor:', error);
    document.getElementById('loadingMessage').innerHTML = 
      '<div class="alert alert-danger"><%= t('admin.errorLoadingMenu') %></div>';
  }
}

// Menü renderelése
function renderMenu() {
  const container = document.getElementById('menuEditor');
  
  if (!menuData.categories || menuData.categories.length === 0) {
    container.innerHTML = `
      <div class="text-center py-5">
        <i class="fas fa-utensils fa-3x text-muted mb-3"></i>
        <h5 class="text-muted"><%= t('admin.noCategories') %></h5>
        <p class="text-muted"><%= t('admin.noCategoriesHint') %></p>
      </div>
    `;
    return;
  }

  let html = '';
  
  menuData.categories.forEach((category, catIndex) => {
    html += `
      <div class="menu-category">
        <div class="menu-category-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">${category.name}</h5>
          <div>
            <button class="btn btn-sm btn-outline-primary me-1" onclick="editCategory(${catIndex})">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger" onclick="deleteCategory(${catIndex})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>
        <div class="menu-category-body">
    `;

    if (category.items && category.items.length > 0) {
      category.items.forEach((item, itemIndex) => {
        html += `
          <div class="menu-item">
            <div class="d-flex justify-content-between align-items-start">
              <div class="flex-grow-1">
                <h6 class="mb-1">${item.name}</h6>
                <p class="text-muted mb-1 small">${item.desc || ''}</p>
                <div class="mb-1">
                  ${item.tags ? item.tags.map(tag => 
                    `<span class="badge tag-badge me-1">${tag}</span>`
                  ).join('') : ''}
                  ${item.allergens ? item.allergens.map(allergen => 
                    `<span class="badge allergen-badge me-1">${allergen}</span>`
                  ).join('') : ''}
                </div>
              </div>
              <div class="text-end ms-3">
                <div class="fw-bold text-primary mb-1">${item.price} Fr</div>
                <div>
                  <button class="btn btn-sm btn-outline-primary me-1" onclick="editItem(${catIndex}, ${itemIndex})">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-danger" onclick="deleteItem(${catIndex}, ${itemIndex})">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      });
    } else {
      html += `
        <div class="text-center py-4 text-muted">
          <i class="fas fa-utensils me-2"></i><%= t('admin.noItemsInCategory') %>
        </div>
      `;
    }

    html += `</div></div>`;
  });

  container.innerHTML = html;
}

// Kategória modal
function openCategoryModal(catIndex = null) {
  const modal = new bootstrap.Modal(document.getElementById('categoryModal'));
  const form = document.getElementById('categoryForm');
  
  if (catIndex !== null) {
    // Szerkesztés
    document.getElementById('categoryModalTitle').textContent = '<%= t('admin.editCategory') %>';
    document.getElementById('categoryIndex').value = catIndex;
    document.getElementById('categoryName').value = menuData.categories[catIndex].name;
  } else {
    // Új
    document.getElementById('categoryModalTitle').textContent = '<%= t('admin.newCategory') %>';
    document.getElementById('categoryIndex').value = '';
    form.reset();
  }
  
  modal.show();
}

// Tétel modal
function openItemModal(catIndex = null, itemIndex = null) {
  const modal = new bootstrap.Modal(document.getElementById('itemModal'));
  const form = document.getElementById('itemForm');
  const categorySelect = document.getElementById('itemCategory');
  
  // Kategóriák betöltése a select-be
  categorySelect.innerHTML = '<option value=""><%= t('admin.selectCategory') %></option>';
  menuData.categories.forEach((category, index) => {
    categorySelect.innerHTML += `<option value="${index}">${category.name}</option>`;
  });
  
  if (catIndex !== null && itemIndex !== null) {
    // Szerkesztés
    document.getElementById('itemModalTitle').textContent = '<%= t('admin.editItem') %>';
    document.getElementById('itemCategoryIndex').value = catIndex;
    document.getElementById('itemIndex').value = itemIndex;
    
    const item = menuData.categories[catIndex].items[itemIndex];
    document.getElementById('itemName').value = item.name;
    document.getElementById('itemPrice').value = item.price;
    document.getElementById('itemDescription').value = item.desc || '';
    document.getElementById('itemTags').value = item.tags ? item.tags.join(', ') : '';
    document.getElementById('itemAllergens').value = item.allergens ? item.allergens.join(', ') : '';
    document.getElementById('itemCategory').value = catIndex;
  } else {
    // Új
    document.getElementById('itemModalTitle').textContent = '<%= t('admin.newItem') %>';
    document.getElementById('itemCategoryIndex').value = '';
    document.getElementById('itemIndex').value = '';
    form.reset();
    
    if (catIndex !== null) {
      document.getElementById('itemCategory').value = catIndex;
    }
  }
  
  modal.show();
}

// Kategória mentése
function saveCategory() {
  const catIndex = document.getElementById('categoryIndex').value;
  const name = document.getElementById('categoryName').value.trim();
  
  if (!name) {
    alert('<%= t('admin.categoryRequired') %>');
    return;
  }
  
  if (catIndex === '') {
    // Új kategória
    if (!menuData.categories) menuData.categories = [];
    menuData.categories.push({
      name: name,
      items: []
    });
  } else {
    // Szerkesztés
    menuData.categories[catIndex].name = name;
  }
  
  bootstrap.Modal.getInstance(document.getElementById('categoryModal')).hide();
  renderMenu();
}

// Tétel mentése
function saveItem() {
  const catIndex = parseInt(document.getElementById('itemCategoryIndex').value);
  const itemIndex = document.getElementById('itemIndex').value;
  const targetCatIndex = parseInt(document.getElementById('itemCategory').value);
  
  const name = document.getElementById('itemName').value.trim();
  const price = parseInt(document.getElementById('itemPrice').value);
  const desc = document.getElementById('itemDescription').value.trim();
  const tags = document.getElementById('itemTags').value.split(',').map(t => t.trim()).filter(t => t);
  const allergens = document.getElementById('itemAllergens').value.split(',').map(a => a.trim()).filter(a => a);
  
  if (!name || !price || isNaN(price) || targetCatIndex === '') {
    alert('<%= t('admin.namePriceCategoryRequired') %>');
    return;
  }
  
  const itemData = {
    name: name,
    price: price,
    desc: desc || '',
    tags: tags,
    allergens: allergens
  };
  
  if (itemIndex === '') {
    // Új tétel
    if (!menuData.categories[targetCatIndex].items) {
      menuData.categories[targetCatIndex].items = [];
    }
    menuData.categories[targetCatIndex].items.push(itemData);
  } else {
    // Szerkesztés - kategória változás ellenőrzése
    if (catIndex === targetCatIndex) {
      // Ugyanabban a kategóriában marad
      menuData.categories[catIndex].items[itemIndex] = itemData;
    } else {
      // Áthelyezés másik kategóriába
      menuData.categories[catIndex].items.splice(itemIndex, 1);
      if (!menuData.categories[targetCatIndex].items) {
        menuData.categories[targetCatIndex].items = [];
      }
      menuData.categories[targetCatIndex].items.push(itemData);
    }
  }
  
  bootstrap.Modal.getInstance(document.getElementById('itemModal')).hide();
  renderMenu();
}

// Törlés funkciók
function deleteCategory(index) {
  if (confirm('<%= t('admin.confirmDeleteCategory') %>')) {
    menuData.categories.splice(index, 1);
    renderMenu();
  }
}

function deleteItem(catIndex, itemIndex) {
  if (confirm('<%= t('admin.confirmDeleteItem') %>')) {
    menuData.categories[catIndex].items.splice(itemIndex, 1);
    renderMenu();
  }
}

// Szerkesztés funkciók
function editCategory(index) {
  openCategoryModal(index);
}

function editItem(catIndex, itemIndex) {
  openItemModal(catIndex, itemIndex);
}

// Menü mentése a szerverre
async function saveMenu() {
  try {
    const response = await fetch('/api/menu', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'CSRF-Token': await getCsrfToken()
      },
      body: JSON.stringify(menuData)
    });

    if (!response.ok) throw new Error('Failed to save menu');

    const result = await response.json();
    
    if (result.ok) {
      alert('<%= t('admin.menuSaved') %>');
    } else {
      alert('<%= t('admin.errorSaving') %>' + (result.msg || 'Unbekannter Fehler'));
    }
  } catch (error) {
    console.error('Hiba a menü mentésekor:', error);
    alert('<%= t('admin.errorSavingMenu') %>');
  }
}

// Inicializálás
document.addEventListener('DOMContentLoaded', function() {
  loadMenu();
});
</script>